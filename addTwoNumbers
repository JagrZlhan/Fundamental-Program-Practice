/*
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照逆序的方式存储的，并且它们的每个节点只能存储一位数字。
将这两个数相加起来，返回一个新的链表来表示它们的和。
假设除了数字 0 之外，这两个数都不会以 0 开头。
示例：
输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
/******第一版代码**********
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* retl;
        retl=new ListNode(0); //创建新链表
        int flag=0;
        while(l1->next!=NULL && l2->next!=NULL)
        {
            if(flag==0){
               retl->val = l1->val+l2->val;  /********==30==ERROR: AddressSanitizer: heap-buffer-overflow*****未知错误***/
            }else if(flag==1){
                retl->val = l1->val+l2->val+1;
                flag=0;
            }else {
                cout<<"wrong flag";
            }
            
            if(retl->val>=10)
            {
                retl-=10;
                flag=1;
            }
            l1=l1->next; //用->不能用.
            l2=l2->next;
            retl->next=new ListNode(0); //移到下一位时仍需new一个节点
            retl=retl->next;
        }
        return retl;
    }
};
********************************/


class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *retl = NULL;
        ListNode *head = NULL;  /*若不使用head，则输出只有链表的最后一位*/
        int flag=0;
        while(l1!=NULL || l2!=NULL)
        {
            int x = (l1!=NULL) ? l1->val : 0;
            int y = (l2!=NULL) ? l2->val : 0;
            int sum = flag + x + y;
            flag = sum/10;
            
            if(head == NULL){
                head = new ListNode(sum%10);
                retl = head;
            }else{
                retl->next = new ListNode(sum%10);;
                retl = retl->next;
            }
            // retl = new ListNode(sum%10);
            // retl->next = NULL;
            // retl = retl->next;
            if(l1!=NULL) l1=l1->next;
            if(l2!=NULL) l2=l2->next; 
        }
        if(flag!=0){
            retl->next = new ListNode(flag);
        }
        return head;  
        // return retl;
    }
};
